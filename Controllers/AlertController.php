<?php
/**
 * ContrÃ´leur de gestion des alertes
 * 
 * Ce fichier contient la classe AlertController qui permet de vÃ©rifier
 * si des alertes ou notifications doivent Ãªtre affichÃ©es Ã  l'utilisateur.
 */

// Inclusion des dÃ©pendances nÃ©cessaires
require_once __DIR__ . '/../models/EventModel.php';  // ModÃ¨le pour gÃ©rer les Ã©vÃ©nements
require_once __DIR__ . '/../models/Notification.php'; // ModÃ¨le pour gÃ©rer les notifications

/**
 * Classe AlertController
 * 
 * GÃ¨re les alertes et notifications Ã  afficher aux utilisateurs
 * en temps rÃ©el Ã  travers une API JSON.
 */
class AlertController {
    /**
     * VÃ©rifie s'il y a des alertes ou notifications Ã  afficher
     * 
     * Cette mÃ©thode est appelÃ©e rÃ©guliÃ¨rement par le frontend via AJAX
     * pour dÃ©terminer si une notification doit Ãªtre affichÃ©e Ã  l'utilisateur.
     * Elle vÃ©rifie Ã  la fois les alertes d'Ã©vÃ©nements et les autres types de notifications.
     * 
     * @return void Envoie une rÃ©ponse JSON indiquant s'il y a une alerte Ã  afficher
     */
    public function check() {
        // DÃ©finit l'en-tÃªte de la rÃ©ponse comme Ã©tant du JSON
        header('Content-Type: application/json');

        // DÃ©marrage de la session si elle n'est pas dÃ©jÃ  active
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }

        // RÃ©cupÃ©ration de l'ID de l'utilisateur depuis la session
        $userId = $_SESSION['user_id'];
        
        // Date et heure actuelles pour comparer avec les alertes programmÃ©es
        $now = date('Y-m-d H:i:s');

        // Instanciation du modÃ¨le d'Ã©vÃ©nements
        $model = new EventModel();
        
        // VÃ©rification des alertes d'Ã©vÃ©nements programmÃ©es pour maintenant
        $alert = $model->getAlertForTime($userId, $now);

        // Si une alerte d'Ã©vÃ©nement est trouvÃ©e
        if ($alert) {
            // Marquer l'alerte comme dÃ©clenchÃ©e pour Ã©viter de l'afficher Ã  nouveau
            $model->markAlertAsTriggered($alert['id']);
            
            // Retourner les informations sur l'alerte au format JSON
            echo json_encode([
                'should_alert' => true,   // Indique qu'une alerte doit Ãªtre affichÃ©e
                'type' => 'event',        // Type d'alerte : Ã©vÃ©nement
                'message' => $alert['notification_message'], // Message Ã  afficher
                'id' => $alert['id']      // ID de l'Ã©vÃ©nement pour rÃ©fÃ©rence
            ]);
            return; // Termine la fonction
        }

        // ğŸ”” VÃ©rification d'autres types de notifications (photo, message) si aucun Ã©vÃ©nement
        $notifs = Notification::getUnseenByUser($userId);
        
        // Si des notifications non vues sont trouvÃ©es
        if (!empty($notifs)) {
            // Prendre la premiÃ¨re notification de la liste
            $notif = $notifs[0];
            
            // Marquer cette notification comme vue pour Ã©viter de l'afficher Ã  nouveau
            Notification::markAsSeen($notif['id']);
            
            // Retourner les informations sur la notification au format JSON
            echo json_encode([
                'should_alert' => true,    // Indique qu'une alerte doit Ãªtre affichÃ©e
                'type' => $notif['type'],  // Type de notification (photo, message, etc.)
                'message' => $notif['content'], // Contenu de la notification
                'id' => $notif['id']       // ID de la notification pour rÃ©fÃ©rence
            ]);
            return; // Termine la fonction
        }

        // Si aucune alerte ou notification n'est trouvÃ©e, retourner false
        echo json_encode(['should_alert' => false]);
    }
}